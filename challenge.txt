/*
You are provided with a completed Account class hierarchy that was completed in section 1.
The provided class hierarchy does not use dynamic polymorphism.

Your challenge is the following:
1. Modify the Account class so that it is now an Abstract class by adding the following pure virtual functions:
    virtual bool deposit(double amount)=0;
    virtual bool withdrawal(double amount)=0;
2. Create an I_printable class interface as we did and provide the functionality so
all accounts are pritable to an ostream using overloaded insertion operator.
    class I_Printable{
        friend std::ostream &operator<<(std::ostream &os, const I_printable &obj);
        public:
            virtual void print(std::ostream &os)const=0;
            virtual ~I_Printable()=default;
    };
3. Modify the functions in the Account_Util files so we only have one version of each.
For example,
    void display(const std::vector<Account *> &accounts);
    void deposit(const std::vector<Account *> &accounts, double amount);
    void withdraws((const std::vector<Account *> &accounts, double amount);
*/
